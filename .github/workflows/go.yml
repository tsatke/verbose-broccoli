name: Go

on:
  push:
  pull_request:

jobs:

  test:
    strategy:
      matrix:
        go_version: [ 1.16 ]
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go_version }}

      - name: Test
        run: go test -v ./...

  database_test:
    strategy:
      matrix:
        go_version: [ 1.16 ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    container: golang:${{ matrix.go_version }}
    services:
      postgres:
        image: postgres:12.4
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go_version }}

      - name: Test
        run: |
          export PG_HOST=postgres
          go test -v ./...

  coverage:
    needs: test
    strategy:
      matrix:
        go_version: [ 1.16 ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go_version }}

      - name: Generate coverage
        run: go test -coverprofile="cover.out" -v ./...

      - name: Report coverage
        if: contains(matrix.os, 'ubuntu')
        run: |
          curl https://deepsource.io/cli | sh
          export DEEPSOURCE_DSN=https://937c6f20f5e744c88630fceb4a485bc4@deepsource.io
          ./bin/deepsource report --analyzer test-coverage --key go --value-file ./cover.out
