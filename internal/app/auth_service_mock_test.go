// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package app

import mock "github.com/stretchr/testify/mock"

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

// AnswerChallenge provides a mock function with given fields: user, challenge, payload
func (_m *MockAuthService) AnswerChallenge(user string, challenge string, payload string) (bool, error) {
	ret := _m.Called(user, challenge, payload)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(user, challenge, payload)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(user, challenge, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: user, pass
func (_m *MockAuthService) Login(user string, pass string) (LoginResult, error) {
	ret := _m.Called(user, pass)

	var r0 LoginResult
	if rf, ok := ret.Get(0).(func(string, string) LoginResult); ok {
		r0 = rf(user, pass)
	} else {
		r0 = ret.Get(0).(LoginResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user, pass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenValid provides a mock function with given fields: _a0
func (_m *MockAuthService) TokenValid(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
